generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  WEB_MASTER
  ADMIN
  USER
  ORGANIZER
}

enum UserSatus {
  ACTIVE
  INACTIVE
  UNCONFIRMED
  SUSPENDED
}

model User {
  status                UserSatus              @default(UNCONFIRMED)
  id                    String                 @id @default(cuid())
  firstName             String?
  lastName              String?
  profileImage          Json?
  email                 String                 @unique
  username              String                 @unique
  phone                 String?                @unique // Optional phone number, unique across users
  password              String
  addresses             UserAddress[]
  birthday              DateTime?
  emailVerified         DateTime?
  lastLogin             DateTime?
  role                  UserRole               @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  orders                Order[]
  experiences           Experience[]
  passCards             PassCard[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  @@index([email])
}

model UserAddress {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      AddressType // Enum: BILLING or SHIPPING
  street    String?
  address1  String?
  address2  String?
  city      String
  state     String
  postcode  String
  country   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Order {
  id                 String      @id @default(cuid())
  orderNumber        String      @unique
  userId             String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status             OrderStatus @default(pending)
  orderItems         OrderItem[]
  shippingAddress    Json?
  billingAddress     Json?
  trackingNumber     String?
  setPaid            Boolean     @default(false)
  currency           String?
  paymentMethod      String?
  paymentMethodTitle String?
  paymentStatus      String?
  transactionId      String?
  paymentIntentId    String?
  discountTotal      Float?
  discountTax        Float?
  shippingTotal      Float?
  shippingTax        Float?
  cartTax            Float?
  totalAmount        Float?
  totalTax           Float?
  pricesIncludeTax   Boolean?    @default(false)
  customerNote       String?
  datePaid           DateTime?
  dateCompleted      DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  passCards          PassCard[]

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id          String            @id @default(cuid())
  orderId     String
  order       Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int
  variationId String? // Optional, for variations
  variation   ProductVariation? @relation("OrderItemToProductVariation", fields: [variationId], references: [id], onDelete: Cascade)
  price       Float // Price per unit at the time of order
  totalPrice  Float // Calculated as quantity * price
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([orderId])
  @@index([productId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model PassCard {
  id             String              @id @default(cuid())
  cardNumber     String              @unique
  userId         String
  orderId        String
  status         PassCardStatus      @default(pending)
  tier           CardTier
  validFrom      DateTime?
  validUntil     DateTime?
  divesRemaining Int?
  trackingNumber String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  order          Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  bookings       ExperienceBooking[]

  @@index([userId])
  @@index([orderId])
  @@index([status])
}

model Attribute {
  id         String             @id @default(cuid())
  name       String
  slug       String             @unique
  type       AttributeType      @default(default)
  shape      AttributeShape     @default(default)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  switchers  Switcher[]
  products   ProductAttribute[]
  variations ProductVariation[]

  @@index([slug])
  @@index([type])
}

model Switcher {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique
  description String?
  color       String?
  image       Json?
  attributeId String
  attribute   Attribute          @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  products    ProductVariation[]

  @@index([slug])
  @@index([attributeId])
}

model ProductAttribute {
  id          String    @id @default(cuid())
  productId   String
  attributeId String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([productId, attributeId])
  @@index([productId])
  @@index([attributeId])
}

model ProductVariation {
  id                String      @id @default(cuid())
  productId         String
  attributeId       String
  switcherId        String
  featuredImage     Json?
  manageStock       Boolean     @default(false)
  price             Float
  regularPrice      Float?
  soldPrice         Float?
  initialQuantity   Int?
  availableQuantity Int?
  soldQuantity      Int?
  orderItems        OrderItem[] @relation("OrderItemToProductVariation")
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  switcher          Switcher    @relation(fields: [switcherId], references: [id], onDelete: Cascade)
  attribute         Attribute   @relation(fields: [attributeId], references: [id])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([productId, attributeId, switcherId])
  @@index([productId])
  @@index([attributeId])
  @@index([switcherId])
}

model Product {
  id                String             @id @default(cuid())
  name              String
  color             String?
  description       String
  slug              String             @unique
  featuredImage     Json?
  shippingDetails   Json?
  status            ProductStatus      @default(published)
  individuallySell  Boolean            @default(true)
  freeShipping      Boolean            @default(true)
  price             Float
  regularPrice      Float?
  soldPrice         Float?
  initialQuantity   Int
  availableQuantity Int
  soldQuantity      Int
  tier              CardTier
  images            Json[] // Array of { id: string, url: string, alt: string, colorId?: string }
  attributes        ProductAttribute[]
  variations        ProductVariation[]
  orders            OrderItem[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([id])
}

model Experience {
  id             String              @id @default(cuid())
  title          String
  description    String
  location       String
  startDate      DateTime
  endDate        DateTime
  capacity       Int
  availableSpots Int
  imageUrl       String?
  status         ExperienceStatus    @default(draft)
  organizerId    String // Added field
  organizer      User                @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  bookings       ExperienceBooking[]
  allowedTiers   ExperienceTier[]

  @@index([status])
  @@index([startDate, endDate])
  @@index([organizerId]) // Added index
}

model ExperienceTier {
  id           String     @id @default(cuid())
  experienceId String
  tier         CardTier
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@unique([experienceId, tier])
  @@index([experienceId])
}

model ExperienceBooking {
  id           String        @id @default(cuid())
  experienceId String
  passCardId   String
  status       BookingStatus @default(pending)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  experience   Experience    @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  passCard     PassCard      @relation(fields: [passCardId], references: [id], onDelete: Cascade)

  @@index([experienceId])
  @@index([passCardId])
  @@index([status])
}

enum CardTier {
  plus
  ultra
  max
}

enum OrderStatus {
  pending
  processing
  completed
  cancelled
  refunded
  pending_production
  in_production
  ready_to_ship
  shipped
  delivered
}

enum PassCardStatus {
  activated
  pending
  expired
  cancelled
}

enum ExperienceStatus {
  draft
  published
  cancelled
  completed
}

enum ProductStatus {
  draft
  published
  discontinued
  out_of_stock
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
}

enum AttributeType {
  default
  label
  color
  image
}

enum AttributeShape {
  default
  square
  rounded
  circle
}

enum AddressType {
  BILLING
  SHIPPING
}
